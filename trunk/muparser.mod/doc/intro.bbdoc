<p>
<a href="http://muparser.sourceforge.net/">muParser</a> is an extensible high performance math parser library.
</p>

<h2><a name="idFeature">muParser Features</a></h2>

<p>
The following is a list of the features currently supported by the parser library. 
The primary objective is to keep it as extensible as possible whilst ensuring a maximum parsing speed. Extending the parser is mostly based on allowing a user to add custom callbacks which require only an absolute minimum of code. For instance you need exactly 2 lines of code to add a new function.
But extending the parser may not be necessary at all since it comes with a powerful default 
implementation. Here is the (incomplete) list of features:
</p>

<h3><a name="idFeatureOverview">Overview</a></h3>

<ul>
  <li><b>Easy to use</b></li>
  <ul>
    <li>You need only a few lines of code to evaluate en expression</li>
  </ul> 
  <li><b>Extremely fast</b></li>
  <ul>
    <li>faster than similar commercial parsers</li>
  </ul> 

  <li><b>User-defined operators</b></li>
  <ul>
    <li>binary operators</li>
    <li>postfix operators</li>
    <li>infix operators</li>
  </ul>

  <li><b>User-defined functions</b>
    <ul>
      <li>with a fixed number of up to five arguments</li>
      <li>with variable number of arguments</li>
      <li>with a single string argument (for database queries)</li>
    </ul>
  </li>

  <li><b>User-defined constants.</b>
  <ul>
    <li>numeric constants</li>
    <li>string constants</li>
  </ul> 
  </li>

  <li><b>User-defined variables.</b>
    <ul>
        <li>unlimited in number</li>	
        <li>definable at parser runtime by the parser</li>
        <li>assigning variables in terms of other variables is possible</li>	
    </ul>
  </li>
  
  <li><b>Custom value recognition callbacks</b>
    <ul>
	<li>support for binary and hex values.</li>
        <li>can be used to implement database queries</li>
    </ul>
  </li>

  <li><b>Default implementaion with many features</b></li> 
    <ul>
      <li>26 <a href="#idDef1">predefined functions</a>.</li>
      <li>15 <a href="#idDef2">predefined operators</a>.</li>
      <li>Supports numerical differentiation with respect to a given variable.</li>
      <li>Assignement operator is supported</li>
    </ul>

  <li><b>Unit support</b>
    <ul>
      <li>Use postfix operators as unit multipliers <code>(3m -> 0.003)</code></li>
    </ul>
  </li>

</ul>

<h3><a name="idDef1">The default implementation</a></h3>
<p>
This section gives an overview on the default features supported by the parser. The default
implementation is defined in the type <code>TmuParser</code>.

<h4><a name="idDef2">Built-in functions</a></h4>
<p>
The following table gives an overview of the functions supported by the
default implementation. It lists the function names, the number of 
arguments and a brief description.
</p>

<p>
<blockquote>
<small>
<table border="1">
<tr>
  <th><b>Name</b></th>  <th><b>Argc.</b></th>  <th><b>Explanation</b></th>
</tr>
<tr><td><code>sin</code></td>   <td align="center">1</td>     <td>sine function</td></tr>
<tr><td><code>cos</code></td>   <td align="center">1</td>     <td>cosine function</td></tr>
<tr><td><code>tan</code></td>   <td align="center">1</td>     <td>tangens function</td></tr>
<tr><td><code>asin</code></td>  <td align="center">1</td>     <td>arcus sine function</td></tr>
<tr><td><code>acos</code></td>  <td align="center">1</td>     <td>arcus cosine function</td></tr>
<tr><td><code>atan</code></td>  <td align="center">1</td>     <td>arcus tangens function</td></tr>
<tr><td><code>sinh</code></td>  <td align="center">1</td>     <td>hyperbolic sine function</td></tr>
<tr><td><code>cosh</code></td>  <td align="center">1</td>     <td>hyperbolic cosine</td></tr>
<tr><td><code>tanh</code></td>  <td align="center">1</td>     <td>hyperbolic tangens function</td></tr>
<tr><td><code>asinh</code></td> <td align="center">1</td>     <td>hyperbolic arcus sine function</td></tr>
<tr><td><code>acosh</code></td> <td align="center">1</td>     <td>hyperbolic arcus tangens function</td></tr>
<tr><td><code>atanh</code></td> <td align="center">1</td>     <td>hyperbolic arcur tangens function</td></tr>
<tr><td><code>log2</code></td>  <td align="center">1</td>     <td>logarithm to the base 2</td></tr>
<tr><td><code>log10</code></td> <td align="center">1</td>     <td>logarithm to the base 10</td></tr>
<tr><td><code>log</code></td>   <td align="center">1</td>     <td>logarithm to the base 10</td></tr>
<tr><td><code>ln</code></td>    <td align="center">1</td>     <td>logarithm to base e (2.71828...)</td></tr>
<tr><td><code>exp</code></td>   <td align="center">1</td>     <td>e raised to the power of x</td></tr>
<tr><td><code>sqrt</code></td>  <td align="center">1</td>     <td>square root of a value</td></tr>
<tr><td><code>sign</code></td>  <td align="center">1</td>     <td>sign function -1 if x&lt;0; 1 if x&gt;0</td></tr>
<tr><td><code>rint</code></td>  <td align="center">1</td>     <td>round to nearest integer</td></tr>
<tr><td><code>abs</code></td>   <td align="center">1</td>     <td>absolute value</td></tr>
<tr><td><code>if</code></td>    <td align="center">3</td>     <td>if ... then ... else ...</td></tr>
<tr><td><code>min</code></td>   <td align="center">var.</td>  <td>min of all arguments</td></tr>
<tr><td><code>max</code></td>   <td align="center">var.</td>  <td>max of all arguments</td></tr>
<tr><td><code>sum</code></td>   <td align="center">var.</td>  <td>sum of all arguments</td></tr>
<tr><td><code>avg</code></td>   <td align="center">var.</td>  <td>mean value of all arguments</td></tr>
</table>
</small>
</blockquote>
</p>


<h4><a name="idDef3">Built-in binary operators</a></h4>
<p>
The following table lists the default binary operators supported by the parser.

<blockquote>
<table border="1">
<tr><th><b>Operator</b></th>     <th><b>Meaning</b></th>             <td><b>Priority</b></th></tr>
<tr><td><code>=</code></td>      <td>assignement*</td>                <td>-1</td></tr>
<tr><td><code>and</code></td>    <td>logical and</td>                <td>1</td></tr>
<tr><td><code>or</code></td>     <td>logical or</td>                 <td>1</td></tr>
<tr><td><code>xor</code></td>    <td>logical xor</td>                <td>1</td></tr>
<tr><td><code>&lt;=</code></td>  <td>less or equal</td>              <td>2</td></tr>
<tr><td><code>&gt;=</code></td>  <td>greater or equal</td>           <td>2</td></tr>
<tr><td><code>!=</code></td>     <td>not equal</td>                  <td>2</td></tr>
<tr><td><code>==</code></td>     <td>equal</td>                      <td>2</td></tr>
<tr><td><code>&gt;</code></td>   <td>greater than</td>               <td>2</td></tr>
<tr><td><code>&lt;</code></td>   <td>less than</td>                  <td>2</td></tr>
<tr><td><code>+</code></td>      <td>addition</td>                   <td>3</td></tr>
<tr><td><code>-</code></td>      <td>subtraction</td>                <td>3</td></tr>
<tr><td><code>*</code></td>      <td>multiplication</td>             <td>4</td></tr>
<tr><td><code>/</code></td>      <td>division</td>                   <td>4</td></tr>
<tr><td><code>^</code></td>      <td>raise x to the power of y</td>  <td>5</td></tr>
</table>
<small>*The assignment operator is special since it changes one of its
       arguments and can only by applied to variables.</small>
</blockquote>
</p>

<h2>The muParser Interface</h2>
<p>
The following section gives an overview of the parser interface.
</p>
<h3>Parser initialization</h3>
<p>
Code for creating a new parser object.
<pre>
Local parser:TmuParser = New TmuParser
</pre>
</p>
<h3>Setting the expression</h3>
<p>
Setting the expression using the parser requires a String containing the expression as the only parameter.
<pre>
parser.SetExpr(line)
</pre>
</p>
<h3>Evaluating an expression</h3>
<p>
Expression evaluation is done by calling the Eval() method of a parser object.
When evaluating an expression for the first time the parser evaluates the expression string
directly and creates a bytecode during this first time evaluation. Every sucessive call to Eval() will evaluate
the bytecode directly unless you call a method that will silently reset the parser to string parse mode. Some
methods invalidate the bytecode due to possible changes in callback function pointers or variable addresses.
In this way they effectively cause a recreation of the bytecode during the next call to Eval().
</p>
<p>
Internally there are different evaluation functions. One for parsing from a string, the other for parsing from
bytecode (and a third one used only if the expression can be simplified to a constant). Initially, Eval() will
call the string parsing function which is slow due to all the necessary syntax checking, variable lookup, and
bytecode creation. Once this function succeeds, Eval() will change its internal parse function pointer to either
the bytecode parsing function or the const result function which are significantly (approx. 1000 times) faster.
You don't have to worry about this, it's done automatically, just keep in mind that the first time evaluation of
a new formula is significantly slower than any successive call to Eval(). 
</p>
<pre>
Local fVal:Double
Try
  fVal = parser.Eval()
Catch e:TmuParserException
  Print e.message
End Try
</pre>

<h3>Defining parser variables</h3>
<p>
</p>

<h3>Defining parser variables</h3>
<p>
Custom variables can be defined either explicit in the code by using the DefineVar function or implicit by the
parser. Implicit declaration will call a variable factory function provided by the user. The parser is never the
owner of its variables. So you must take care of their destruction in case of dynamic allocation. The general
idea is to bind every parser variable to a BlitzMax variable. For this reason, you have to make sure the BlitzMax variable
stays valid as long as you process a formula that needs it. Only variables of type Double are supported. 
</p>
<h3>Explicitly defining variables</h3>
<p>
Explicitly in this context means you have to add the variables manually it in your application code.
So you must know in advance which variables you intend to use. If this is not the case have a look at the
section on Implicit creation of new variables.
</p>
<p>
<b>Note : </b>Defining new Variables will reset the parser bytecode. Do not use this method just for
changing the values of variables! It would dramatically reduce the parser performance! Once the parser knows
the address of the variable there is no need to explicitly call a function for changing the value. Since
the parser knows the address it knows the value too so simply change the BlitzMax variable in your code directly!
</p>
<p>
The first parameter is the variable name and the second a pointer to the associated BlitzMax variable.
<pre>
Local fVal:Double = 0
parser.DefineVar("a", fVal)
</pre>
</p>
<h3>Implicit creation of new variables</h3>
<p>
Implicit declaration of new variables is only possible by setting a factory function. Implicit creation means
that every time the parser finds an unknown token at a position where a variable could be located it creates a
new variable with that name automatically. The necessary factory function must be of type: 
<pre>
	allback:Double Ptr(name:String, userData:Object)
</pre>
</p>
<p>
The first argument to a factory function is the name of the variable found by the parser. The second is a
reference to user defined data. This reference can be used to provide a type that implements the
actual factory. By doing this it is possible to use custom factory types depending on the variable name.
</p>
<p>
<b>Note : </b>Be aware of name conflicts! Please notice that recognizing the name of an undefined variable is
the last step during parser token detection. If the potential variable name starts with identifiers that could
be interpreted as a function or operator it will be detected as such most likely resulting in an syntax error.
</p>
<p>
The following code is an example of a factory function. The example does not use dynamic allocation for the
new variables although this would be possible too. But when using dynamic allocation you must keep track of
the variables allocated implicitely in order to free them later on. 
</p>
<pre>
Function AddVariable:Double Ptr(name:String, userData:Object)

	Global variables:Double[] = New Double[100]
	Global iVal:Int = 0
	
	If iVal < 100
		Print "Generating new variable '" + name + "' (slots left: " + (99 - iVal) + ")"
	
		Return Double Ptr(variables) + iVal
		iVal:+ 1
	Else
		Throw "No more available variables."
	End If
	
End Function
</pre>
<p>
In order to add a variable factory use the SetVarFactory method. The first parameter is a pointer to the 
factory function, the second parameter is optional and represents a reference to user defined data. Without a
variable factory each undefined variable will cause an undefined token error. Factory functions can be used to
query the values of newly created variables directly from a database.
</p>
<pre>
parser.SetVarFactory(AddVariable, pUserData)
</pre>

<h3>Defining parser constants</h3>
<p>
Parser constants can either be values of type Double or String. Constness refers to the bytecode.
Constants will be stored by their value in the bytecode, not by a reference to their address. Thus accessing
them is faster. They may be optimized away if this is possible. Defining new constants or changing old ones
will reset the parser to string parsing mode thus resetting the bytecode.
</p>
<p>
The Names of user defined constants may contain only the following characters: <tt>0-9, a-z, A-Z, _</tt>, and they may
not start with a number. Violating this rule will raise a parser error. 
</p>
<pre>
' Define value constant _pi
parser.DefineConst("_pi", Pi)

' Define a string constant named strBuf
parser.DefineStrConst("strBuf", "hello world")
</pre>

<h3>Defining parser functions</h3>
<p>
The parser allows the user to define a variety of different callback functions. Functions with a fixed number
of up to five numeric arguments and functions with a variable number of numeric arguments. In order to define
a parser function you need to specify its name, a pointer to a static callback function and an optional flag
indicating if the function is volatile. Volatile functions are functions that can not be optimized.
</p>
<p>
The callback functions must be one of the following types: 
</p>
<pre>
	' For fixed number of arguments
	callback:Double(val:Double)
	callback:Double(val1:Double, val2:Double)
	callback:Double(val1:Double, val2:Double, val3:Double)
	callback:Double(val1:Double, val2:Double, val3:Double, val4:Double)
	callback:Double(val1:Double, val2:Double, val3:Double, val4:Double, val5:Double)
	
	' for a variable number of arguments
	'   first arg:   pointer to the arguments
	'  second arg:   number of arguments
	callback:Double(val:Double Ptr, size:Int)
</pre>
<p>
Defining callback functions by using the parser, you call one of the associated methods :
<pre>
	Method DefineFun1(name:String, callback:Double(val:Double), allowOpt:Int = True)
	Method DefineFun2(name:String, callback:Double(val1:Double, val2:Double), allowOpt:Int = True)
	Method DefineFun3(name:String, callback:Double(val1:Double, val2:Double, val3:Double), allowOpt:Int = True)
	Method DefineFun4(name:String, callback:Double(val1:Double, val2:Double, val3:Double, val4:Double), allowOpt:Int = True)
	Method DefineFun5(name:String, callback:Double(val1:Double, val2:Double, val3:Double, val4:Double, val5:Double), allowOpt:Int = True)

	Method DefineMultFun(name:String, callback:Double(val:Double Ptr, size:Int), allowOpt:Int = True)
</pre> 
</p>

<h3>Defining parser operators</h3>
<p>
The parser is extensible with different kinds of operators: prefix operators, infix operators and binary
operators. Operators can be applied to numerical values only (not to string constants).
<ul>
<li>Postfix operators are operators that succeed values. For instance the factorial operator <tt>(a! = a*(a-1)...*2*1)</tt>.
Another application for postfix operators is their use as multipliers that can be used for implementing units.</li>
<li>Infix operators are operators like the unary minus which serves as a sign or the logical not <tt>"!(a&lt;9)"</tt>.</li>
<li>Binary operators can be defined in order to supplement or replace the built in binary operators they require an
additional parameter, the operator priority.</li>
</ul>
</p>
<h4>Unary operators</h4>
<p>
Both postfix and infix operators take callback functions using a single parameter like the following:
<pre>
Function MyCallback:Double(fVal:Double)
	Return fVal / 1000.0
End Function
</pre>
</p>
<p>
For defining postfix operators and infix operators you need a valid parser instance, an identifier string,
and an optional third parameter marking the operator as volatile (non optimizable). 
<pre>
' Define an infix operator
parser.DefineInfixOprt("!", MyCallback)

' Define a postfix operators
parser.DefinePostfixOprt("m", MyCallback)

</pre>
</p>

<h4>Binary operators</h4>
<p>
This parser has 15 Built in binary operators. Sometimes it might be necessary to add additional custom binary
operators. Examples are <tt>shl</tt> or <tt>shr</tt>, the <b>"shift left"</b> and <b>"shift right"</b> operators for integer numbers. In order
to add user defined operators you need to assign a name, a callback function with two parameters and a priority
for each new binary operator. You are not allowed to overload built in operators, this would result in an error
being raised! For instance lets consider the following callback function which should be assigned to a binary
operator:
<pre>
Function pMyAddFun:Double(v1:Double, v2:Double) 
	Return v1 + v2
End Function
</pre>
For the definintion of binary operators you need at least 4 parameters. The first is a valid parser handle,
the second is the identifier of the operator, the third is the operator callback function, the fourth is the
operator priority and the optional fifth parameter is a flag of type Int marking the operator as volatile.
(The examples below omit the last flag.) Having defined a proper operator callback function you can add the
binary operator with the following code: 
<pre>
parser.DefineOprt("add", pMyAddFun, 0)
</pre>
</p>
<p>
The priority value must be greater or equal than zero (lowest possible priority). It controls the operator
precedence in the formula. For instance if you want to calculate the formula <tt>1+2*3^4</tt> in a mathemetically correct
sense you have to make sure that Addition has a lower priority than multiplication which in turn has a lower
priority than the power operator. The most likely cases are that you assign an operator with a low priority of 0
(like <tt>and</tt>, <tt>or</tt>, <tt>xor</tt>) or a high priority that is larger than 6. (The priority of the
power operator (^).) By assigning Priority values already used by built in operators you might introduce unwanted
side effects. To avoid this and make the order of calculation clear you must use brackets in these cases.
Otherwise the order will be determined by the Formula parsing direction which is from left to right.
</p>
<p>
Example A: Priority of <tt>shl</tt> equals priority of an addition; The order of the execution is from left to right. 
<pre>
1 + 2 shl 1 => (1 + 2) shl 1
2 shl 1 + 1 => (s shl 1) + 1
</pre>
Example B: Priority of <tt>shl</tt> is higher than the one of the addition; <tt>shl</tt> is executed first. 
<pre>
1 + 2 shl 1 => 1 + (2 shl 1)
2 shl 1 + 1 => (2 shl 1) + 1
</pre>
</p>
<p>
If you encounter such conflicts or simply dont need the built in operators these can easily be deactivated using
the EnableBuiltInOprt(Int) method. If you call this method you must add binary operators manually. After all
without any operators you won't be able to parse anything useful. User defined operators come with approximately
10% decrease in parsing speed compared to built in operators. There is no way to avoid that. They cause an overhead
when calling their callback functions. (This is the reason why there are built in operators).
<pre>
' disable all built in operators
parser.EnableBuiltInOprt(False)
</pre>
</p>
<h3>Querying parser variables</h3>
<p>
Keeping track of all variables can be a difficult task. For simplification the parser allows the user to query the variables defined in the parser. There are two different sets of variables that can be accessed:
<ul>
<li>Varaiables defined in the parser</li>
<li>Variables used in the current expression</li>
</ul>
Since the usage of the necessary commands is similar the following example shows querying the parser variables only.
</p>
<p>
For querying the expression variables exchange parser.GetVar() with parser.GetUsedVar() in the following example.
</p>
<pre>
' Get the array of variables
Local variables:TmuParserVariable[] = parser.GetVar()
Print "Number : " + variables.length

' Query the variables
For Local variable:TmuParserVariable = EachIn variables
	Print "Name: " + variable.name +  " Value: " + variable.variable[0]
Next
</pre>
<h3>Querying parser constants</h3>
<p>
Querying parser constants is similar to querying variables and expression variables.
</p>
<p>
The parser class provides you with the GetConst() method that returns an array with all defined constants. The following code snippet shows how to use it:
</p>
<pre>
Local consts:TmuParserConstant[] = parser.GetConst()

For Local constant:TmuParserConstant = EachIn consts
    Print "  " + constant.name + " =  " + constant.value
Next
</pre>
<h3>Removing variables or constants</h3>
<p>
Removing variables and constants can be done all at once using <tt>ClearVar</tt> and <tt>ClearConst</tt>. Additionally variables can be removed by name using <tt>RemoveVar</tt>. Since the parser never owns the variables you must take care of their release yourself if they were dynamically allocated. If you need to browse all the variables for that purpose have a look at the section explaining how to query parser variables.
</p>
<pre>
' Remove all constants
parser.ClearConst()

' remove all variables
parser.ClearVar()

' remove a single variable by name
parser.RemoveVar("a")
</pre>
<h3>Error handling</h3>
<p>
In case of an error, a TmuParserException will be thrown. From that you can query the error code, message, expression and position in the expression where the error occured.
</p>


</p>