Parsing test_html.cs

-- Parse successfully <....>
-- Test with relevant CS commands -- 

var: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

uvar: </title><script>alert(1)</script>

alt: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Var created using 'set' command: &lt;script&gt;alert(1);&lt;/script&gt;

lvar: Hello &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

evar: Hello &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;




name: &lt;evilname&gt;


include: 
Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


linclude: 
Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Call macro:Inside macro which *should* be auto escaped
Argument: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
Local var: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
End macro

-- Test with explicit escaping functions, which should take precedence --


Inside cs escape: "js" : \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E



Inside cs escape: "none" : </title><script>alert(1)</script>




<script>
var x = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
var htmlX = "&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
var noneX = "</title><script>alert(1)</script>"
var xagain = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
</script>


<script>
include inside escape html:
var htmlX = Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

var X = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
include inside escape none:
var noneX = Title: </title><script>alert(1)</script>

var xagain = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
</script>

--- Test all possible auto escaping cases ---

HTML body: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

HTML attr: <input type=text name="quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;" > 

Unquoted attr: <input value=quote&#39;backslash\semicolon;endtag&lt;/script&gt; > 

Unquoted attr with spaces: <input value=helloworldtoyou>

Unquoted attr with ctrl chars: <input value=hide>


Bad HTML tag name: <abcs value=x >

Bad HTML attr name: <input abcs value=x >


Good HTML tag name: <ab-cs value=x >

Good HTML attr name: <input ab-cs value=x >

JS attr: <input name=x onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted JS inside quoted attr: <input name=x onclick="alert(null)">

Quoted JS inside unquoted attr: <input name=x onclick=alert('quote\x20\x27\x20backslash\x20\x5C\x20semicolon\x20\x3B\x20end\x20tag\x20\x3C\x2Fscript\x3E')>

Unquoted JS inside unquoted attr: <input name=x onclick=alert(null)>

Quoted JS with spaces in unquoted attr: <input onclick=alert('hello\x0Aworld\x09to\x0D\x20you')>

Quoted JS with ctrl chars in unquoted attr: <input onclick=alert('\x01hi\x03\x08d\x1F\x7Fe')>


Valid unquoted JS attr: <input name=x onclick=alert(10)>
Valid unquoted JS in quoted attr: <input name=x onclick="alert(10)">


Valid JS boolean literal: <input name=x onclick=alert(true)>


Valid JS numeric literal: <input name=x onclick=alert(0x45)>


Valid JS numeric literal: <input name=x onclick=alert(45.2345)>


Invalid JS boolean literal: <input name=x onclick=alert(null)>


Invalid JS numeric literal: <input name=x onclick=alert(null)>

URI attr: <a href="http://a.com?q=&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;">link </a>

Unquoted URI attr: <a href=http://a.com?q=quote&#39;backslash\semicolon;endtag&lt;/script&gt;>link </a>

GoodUrl in URI attr: <a href="http://www.google.com">link </a>

GoodUrlCaps in URI attr: <a href="HTTP://WWW.GOOGLE.COM">link </a>

GoodUrl in unquoted URI attr: <a href=http://www.google.com>link </a>

RelativeUrl in URI attr: <a href="logo.gif">link </a>

AbsUrl in URI attr: <a href="/logo.gif">link </a>

AbsUrl2 in URI attr: <a href="www.google.com">link </a>

BadUrl in URI attr: <a href="#">link </a>

BadUrl in unquoted URI attr: <a href=#>link </a>



Unquoted attr value as uvar:
<a href=http://www.google.com onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted attr value as var:
<a href=# onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted attr value as var that is not modified:
<a href=http://www.google.com onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Quoted attr value as uvar:
<a href="http://www.google.com" onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Quoted attr value as var:
<a href="#" onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted attr value pair:

<input name=button onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

attr name as var:
<a href="#" onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted attr value as lvar:
<a href=http://www.google.com onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

name:
<a href=GoodUrl onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Number as var:
<a name=9 onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Number as lvar:
<a name=9 onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

A kludgy way to validate that variable outside tag is not parsed:

<script>
var q="quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;"

</script>

-- Test Style --

In style attr "2px \x123 <>()' solid #ddd;": <input name=x style="border: 2px x123  solid #ddd">

In unquoted style attr: <input name=x style=border:2pxx123solid#ddd>

Valid style attr " 95%": <input name=x style="font-size: 95%">

Valid unquoted style attr: <input name=x style=font-size:95%>

Inside javascript: 
<script>
var unquoted = null

var unquoted_num = 10

var unquoted_bool = false

var bad_number = null
var quoted = "\x22 alert(1)\x3B"
</script>

Inside style tag: 
<style>
 
 div.paddedRadioOption {
 /* Valid style property: " #110022" */ color:  #110022;
    }

 
 /* Invalid style body: "body {background-image: url(javascript:alert(1));}" */ body background-image urljavascriptalert1

 /* Non ascii: "€" */ font-family: €
</style>

-- End of tests --

