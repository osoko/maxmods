Parsing test.cs

Start of File




   <evilname> = <evilname>



  Blah == wow






wow (true)



  This is True





  wow



I'm in test2.cs


wow2


I'm in test2.cs


wow2


escape: not used
UrlArg: Secret Password~!@#$%^&*()+=-_|\[]{}:";'<>,.?
BlahJs: quote ' backslash \ semicolon ; end tag </script>
Title:  </title><script>alert(1)</script>


escape: none
UrlArg: Secret Password~!@#$%^&*()+=-_|\[]{}:";'<>,.?
BlahJs: quote ' backslash \ semicolon ; end tag </script>
Title:  </title><script>alert(1)</script>



escape: html
UrlArg: Secret Password~!@#$%^&amp;*()+=-_|\[]{}:&quot;;&#39;&lt;&gt;,.?
BlahJs: quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;
Title:  &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;



escape: js
UrlArg: Secret Password~!@#$%^\x26*()+=-_|\x5C[]{}:\x22\x3B\x27\x3C\x3E,.?
BlahJs: quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
Title:  \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E



escape: url
UrlArg: Secret+Password%7E!%40%23%24%25%5E%26*()%2B%3D-_%7C%5C%5B%5D%7B%7D%3A%22%3B%27%3C%3E%2C.%3F
BlahJs: quote+%27+backslash+%5C+semicolon+%3B+end+tag+%3C%2Fscript%3E
Title:  %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3E



Nested escaping: html
The internal calls should take precedence
url  -> UrlArg: Secret+Password%7E!%40%23%24%25%5E%26*()%2B%3D-_%7C%5C%5B%5D%7B%7D%3A%22%3B%27%3C%3E%2C.%3F
js   -> BlahJs: quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
html -> Title:  &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Defining the macro echo_all inside of a "html" escape.


Calling echo_all() macro:

not used: </title><script>alert(1)</script>quote ' backslash \ semicolon ; end tag </script>
none:     </title><script>alert(1)</script>quote ' backslash \ semicolon ; end tag </script>
url:      %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3Equote+%27+backslash+%5C+semicolon+%3B+end+tag+%3C%2Fscript%3E
js:       \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3Equote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
html:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;



Calling echo_all() macro from within "html":

not used: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;
none:     </title><script>alert(1)</script>quote ' backslash \ semicolon ; end tag </script>
url:      %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3Equote+%27+backslash+%5C+semicolon+%3B+end+tag+%3C%2Fscript%3E
js:       \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3Equote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
html:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;




Calling echo_all() macro from within "js":

not used: \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3Equote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
none:     </title><script>alert(1)</script>quote ' backslash \ semicolon ; end tag </script>
url:      %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3Equote+%27+backslash+%5C+semicolon+%3B+end+tag+%3C%2Fscript%3E
js:       \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3Equote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
html:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;




Calling echo_all() macro from within "url":

not used: %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3Equote+%27+backslash+%5C+semicolon+%3B+end+tag+%3C%2Fscript%3E
none:     </title><script>alert(1)</script>quote ' backslash \ semicolon ; end tag </script>
url:      %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3Equote+%27+backslash+%5C+semicolon+%3B+end+tag+%3C%2Fscript%3E
js:       \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3Equote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
html:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;




Nested if escaping:
Should be: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

If:        &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
IfAlt:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Else:      &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Elif:      &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
If:        &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;



Nested If:        &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;



Calling echo_all() macro inside escape, within if:

not used: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;
none:     </title><script>alert(1)</script>quote ' backslash \ semicolon ; end tag </script>
url:      %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3Equote+%27+backslash+%5C+semicolon+%3B+end+tag+%3C%2Fscript%3E
js:       \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3Equote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E
html:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;

Defining show_title() inside escape, within if




Calling show_title() outside escape:
No escaping: </title><script>alert(1)</script>
none:     </title><script>alert(1)</script>
html:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Now a series of tests testing the interaction between 'escape' and various control flows

Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After def: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside if: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After if: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
Inside def: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
After call: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside loop: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside loop: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside loop: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After loop: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside each: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside each: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After each: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside with: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After with: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Now a series of tests wrapping various control flows in 'escape'

Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After var: </title><script>alert(1)</script>




After def: </title><script>alert(1)</script>



Inside if: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


After if: </title><script>alert(1)</script>


Inside call: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After call: </title><script>alert(1)</script>



Inside loop: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside loop: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside loop: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


After loop: </title><script>alert(1)</script>



Inside each: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside each: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


After each: </title><script>alert(1)</script>



Inside with: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


After with: </title><script>alert(1)</script>

Now test escape with nested calls




Should be html escaped :local: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
Macro:  &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt; 

Should not be html escaped:local: </title><script>alert(1)</script>


Now test escape with nested defs


Calling defs from inside escape:
Inside def: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside inner def: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Calling defs from outside escape:
Inside def: </title><script>alert(1)</script>

Inside inner def: </title><script>alert(1)</script>


Now test escape inside def


Before escape: </title><script>alert(1)</script>

Inside escape: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

After escape: </title><script>alert(1)</script>


Now test escape with name



&lt;EvilName&gt;





&lt;EvilName&gt;



Include:
Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;



Linclude:
Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;



Evar:
Hello &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Lvar:
Hello &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Nested include:
&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
lvar:Hello &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
include:Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

linclude:Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;



call:&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

Inside escape command:
lvar:Hello \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E
include:Title: \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E

linclude:Title: \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E


call:\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E



End Nested include


not used: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
none:     </title><script>alert(1)</script>
url:      %3C%2Ftitle%3E%3Cscript%3Ealert(1)%3C%2Fscript%3E
js:       \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E
html:     &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;



  x = zero
  x.num = #0


  This is True.

wow

  x = one
  x.num = 


  This is True.

wow

  x = two
  x.num = #2


  This is True.

wow

  x = three
  x.num = 


  This is True.

wow




  This is False.



  Outside 0
  
    Inside = 0
  
    Inside = 1
  

  Outside 1
  
    Inside = 2
  
    Inside = 3
  

  Outside 2
  
    Inside = 2
  
    Inside = 3
  

  Outside 3
  



  TestIf == 0



Correct, "1" == "1"




between comments



More?
