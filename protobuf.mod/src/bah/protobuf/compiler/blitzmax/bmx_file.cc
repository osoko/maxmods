// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.
// http://code.google.com/p/protobuf/
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.

#include <bah/protobuf/compiler/blitzmax/bmx_file.h>
#include <bah/protobuf/compiler/blitzmax/bmx_enum.h>
#include <bah/protobuf/compiler/blitzmax/bmx_service.h>
#include <bah/protobuf/compiler/blitzmax/bmx_extension.h>
#include <bah/protobuf/compiler/blitzmax/bmx_helpers.h>
#include <bah/protobuf/compiler/blitzmax/bmx_message.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/stubs/strutil.h>

namespace google {
namespace protobuf {
namespace compiler {
namespace bmx {

// ===================================================================

FileGenerator::FileGenerator(const FileDescriptor* file,
                             const string& dllexport_decl)
  : file_(file),
    message_generators_(
      new scoped_ptr<MessageGenerator>[file->message_type_count()]),
    enum_generators_(
      new scoped_ptr<EnumGenerator>[file->enum_type_count()]),
    service_generators_(
      new scoped_ptr<ServiceGenerator>[file->service_count()]),
    extension_generators_(
      new scoped_ptr<ExtensionGenerator>[file->extension_count()]) {

  for (int i = 0; i < file->message_type_count(); i++) {
    message_generators_[i].reset(
      new MessageGenerator(file->message_type(i), dllexport_decl));
  }

  for (int i = 0; i < file->enum_type_count(); i++) {
    enum_generators_[i].reset(
      new EnumGenerator(file->enum_type(i), dllexport_decl));
  }

  for (int i = 0; i < file->service_count(); i++) {
    service_generators_[i].reset(
      new ServiceGenerator(file->service(i), dllexport_decl));
  }

  for (int i = 0; i < file->extension_count(); i++) {
    extension_generators_[i].reset(
      new ExtensionGenerator(file->extension(i), dllexport_decl));
  }

  SplitStringUsing(file_->package(), ".", &package_parts_);
}

FileGenerator::~FileGenerator() {}

void FileGenerator::GenerateGlue(io::Printer* printer) {

  string filename_identifier = FilenameIdentifier(file_->name());
  string basename = StripProto(file_->name());


  // Generate top of header.
  printer->Print(
    "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
    "\n"
    "\n");

  printer->Print(
	"#include \"$basename$.pb.h\"\n"
	"\n", "basename", basename);


  // Open namespace.
  GenerateNamespaceOpeners(printer);


  // Generate forward declarations.
  printer->Print("\n"
  "extern \"C\" {\n"
  "\n"
  "#include \"blitz.h\"\n"
  
  "\n");
  printer->Indent();
  
  printer->Print("BBString * bah_protobuf__pbConvertUTF8ToMax(const char * s, int length);\n");
  
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateDeclarations(printer);
  }
  
  printer->Outdent();
  printer->Print("\n"
  "}\n"
  "\n");




  // Generate enum definitions.
 //// for (int i = 0; i < file_->message_type_count(); i++) {
 ///   message_generators_[i]->GenerateEnumDefinitions(printer);
//}

  // Generate forward declarations of classes.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateGlue(printer);
  }

//  // Generate class methods.
//  for (int i = 0; i < file_->message_type_count(); i++) {
//    if (i > 0) {
//      printer->Print(kThinSeparator);
//      printer->Print("\n");
//    }
//    message_generators_[i]->GenerateInlineMethods(printer);
//  }

  // Close up namespace.
  GenerateNamespaceClosers(printer);

}

void FileGenerator::GenerateBmx(io::Printer* printer) {

  string filename_identifier = FilenameIdentifier(file_->name());
  string basename = StripProto(file_->name());


	char * modpath = getenv("MODPATH");

  // Generate top of header.
  printer->Print(
    "' Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
    "\n"
    "SuperStrict\n"
    "\n"
    "Import BaH.Protobuf\n"
    "Import BRL.Blitz\n"
    "\n"
    "\n");

  printer->Print(
	"Import \"$modpath$/bah.mod/protobuf.mod/src/*.h\"\n"
	"Import \"*.h\"\n"
	"Import \"$basename$.pb_glue.cpp\"\n"
	"Import \"$basename$.pb.cc\"\n"   // FIXME : change to .cpp
	"\n", "basename", basename, "modpath", modpath);

  // Generate enum definitions.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateEnumDefinitions(printer);
  }

  // Generate forward declarations of classes.
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateType(printer);
  }

//  // Generate class methods.
//  for (int i = 0; i < file_->message_type_count(); i++) {
//    if (i > 0) {
//      printer->Print(kThinSeparator);
//      printer->Print("\n");
//    }
//    message_generators_[i]->GenerateInlineMethods(printer);
//  }

  // Generate forward declarations of classes.
  printer->Print("Extern\n"
  "\n");
  printer->Indent();
  
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_[i]->GenerateExterns(printer);
  }
  
  printer->Outdent();
  printer->Print("\n"
  "End Extern\n");


}

void FileGenerator::GenerateNamespaceOpeners(io::Printer* printer) {
  if (package_parts_.size() > 0) printer->Print("\n");

  for (int i = 0; i < package_parts_.size(); i++) {
    printer->Print("namespace $part$ {\n",
                   "part", package_parts_[i]);
  }
}

void FileGenerator::GenerateNamespaceClosers(io::Printer* printer) {
  if (package_parts_.size() > 0) printer->Print("\n");

  for (int i = package_parts_.size() - 1; i >= 0; i--) {
    printer->Print("}  // namespace $part$\n",
                   "part", package_parts_[i]);
  }
}


}  // namespace cpp
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
